import discord  # Importar la biblioteca discord para interactuar con la API de Discord
from discord.ext import commands  # Importar comandos de discord.ext para crear comandos de bot
from settings import settings  # Importar configuraciones desde el archivo settings.py
import random  # Importar el m√≥dulo random para generar valores aleatorios

# Definiciones de funciones y datos que estaban en bot_logic.py

# Lista de ideas de manualidades
manualidades = [
    "Haz una maceta usando una botella de pl√°stico.",  # Idea 1
    "Crea un organizador con tubos de PVC.",  # Idea 2
    "Construye un estuche para l√°pices reutilizando botellas peque√±as.",  # Idea 3
]

# Diccionario para clasificar residuos
clasificacion_residuos = {
    "botella de pl√°stico": "Contenedor amarillo (reciclaje de pl√°sticos).",  # Clasificaci√≥n para botellas de pl√°stico
    "papel usado": "Contenedor azul (papel).",  # Clasificaci√≥n para papel usado
    "manzana": "Contenedor de residuos org√°nicos.",  # Clasificaci√≥n para residuos org√°nicos
    "pilas": "Punto limpio o tienda de reciclaje especializado.",  # Clasificaci√≥n para pilas
}

# Diccionario para el tiempo de descomposici√≥n de objetos
tiempo_descomposicion = {
    "bolsa de pl√°stico": "500 a√±os.",  # Tiempo de descomposici√≥n para bolsas de pl√°stico
    "lata de refresco": "200 a√±os.",  # Tiempo de descomposici√≥n para latas
    "papel": "2 a 6 semanas.",  # Tiempo de descomposici√≥n para papel
    "vidrio": "4,000 a√±os.",  # Tiempo de descomposici√≥n para vidrio
}

# Lista de informaci√≥n sobre energ√≠a renovable
energia_renovable = [
    "La energ√≠a solar es una fuente de energ√≠a renovable que se obtiene del sol.",  # Informaci√≥n sobre energ√≠a solar
    "La energ√≠a e√≥lica se genera utilizando el viento para producir electricidad.",  # Informaci√≥n sobre energ√≠a e√≥lica
    "La energ√≠a hidroel√©ctrica se produce a partir del movimiento del agua.",  # Informaci√≥n sobre energ√≠a hidroel√©ctrica
    "La biomasa es una fuente de energ√≠a renovable que se obtiene de materiales org√°nicos.",  # Informaci√≥n sobre biomasa
    "La energ√≠a geot√©rmica se obtiene del calor interno de la Tierra.",  # Informaci√≥n sobre energ√≠a geot√©rmica
]

# Funci√≥n para sugerir una idea de manualidad aleatoria
def sugerir_manualidad():
    return random.choice(manualidades)  # Seleccionar y devolver una idea aleatoria de la lista

# Funci√≥n para clasificar un residuo
def clasificar_residuo(objeto):
    return clasificacion_residuos.get(objeto.lower(), "No tengo informaci√≥n sobre ese objeto.")  # Buscar la clasificaci√≥n del residuo

# Funci√≥n para obtener el tiempo de descomposici√≥n de un objeto
def tiempo_descomposicion_objeto(objeto):
    return tiempo_descomposicion.get(objeto.lower(), "No tengo informaci√≥n sobre ese objeto.")  # Buscar el tiempo de descomposici√≥n

# Funci√≥n para obtener informaci√≥n aleatoria sobre energ√≠a renovable
def obtener_energia_renovable():
    return random.choice(energia_renovable)  # Seleccionar y devolver informaci√≥n aleatoria de la lista

# Configuraci√≥n del bot

# Crear un objeto Intents para especificar los permisos del bot
intents = discord.Intents.default()  # Crear un objeto de intents con permisos b√°sicos
intents.message_content = True  # Habilitar el permiso para leer el contenido de los mensajes

# Crear una instancia del bot con el prefijo de comando "$" y los intents especificados
bot = commands.Bot(command_prefix="$", intents=intents)

# Evento que se ejecuta cuando el bot est√° listo y conectado
@bot.event
async def on_ready():
    print(f"{bot.user} se ha conectado a Discord!")  # Imprimir un mensaje en la consola indicando que el bot est√° listo

# Comando para sugerir una idea de manualidad
@bot.command('manualidad')
async def manualidad(ctx):
    idea = sugerir_manualidad()  # Obtener una idea de manualidad aleatoria
    await ctx.send(f"üßµ Idea de manualidad: {idea}")  # Enviar la idea al canal de Discord

# Comando para clasificar un residuo
@bot.command('clasificar')
async def clasificar(ctx, *, objeto: str):
    respuesta = clasificar_residuo(objeto)  # Clasificar el residuo proporcionado
    await ctx.send(f"‚ôªÔ∏è Clasificaci√≥n: {respuesta}")  # Enviar la clasificaci√≥n al canal de Discord

# Comando para obtener el tiempo de descomposici√≥n de un objeto
@bot.command('descomposicion')
async def descomposicion(ctx, *, objeto: str):
    tiempo = tiempo_descomposicion_objeto(objeto)  # Obtener el tiempo de descomposici√≥n del objeto
    await ctx.send(f"‚è≥ Tiempo de descomposici√≥n: {tiempo}")  # Enviar el tiempo al canal de Discord

# Comando para obtener informaci√≥n sobre energ√≠a renovable
@bot.command('energia')
async def energia(ctx):
    info = obtener_energia_renovable()  # Obtener informaci√≥n aleatoria sobre energ√≠a renovable
    await ctx.send(f"üîã Informaci√≥n sobre energ√≠a renovable: {info}")  # Enviar la informaci√≥n al canal de Discord

# Funci√≥n para generar el mensaje de ayuda
def get_help_message():
    help_message = (
        "*Lista de comandos disponibles:*\n"
        "$manualidad - Sugiere una idea de manualidad.\n"
        "$clasificar <objeto> - Clasifica un residuo.\n"
        "$descomposicion <objeto> - Muestra el tiempo de descomposici√≥n de un objeto.\n"
        "$energia - Muestra informaci√≥n sobre energ√≠a renovable.\n"
        "$idea - Muestra ideas para disminuir la contaminacion hecha por uno.\n"
        "$helpy - Muestra esta lista de comandos.\n"
    )
    return help_message  # Devolver el mensaje de ayuda

# Comando para mostrar la lista de comandos disponibles
@bot.command('helpy')
async def help_command(ctx):
    help_message = get_help_message()  # Generar el mensaje de ayuda
    await ctx.send(help_message)  # Enviar el mensaje de ayuda al canal de Discord

idea_message = [
    "Recicla, encuentra nuevos usos para cosas que ya no uses",
    "Reduce el uso de pl√°sticos (usa bolsas reutilizables y evita productos de un solo uso",
    "Elige productos con menos qu√≠micos o con empaques reciclables",
    "Usa el transporte p√∫blico o camina para reducir las polucion",
    "Informa a otros al compartir consejos ecol√≥gicos con amigos, familia o en redes sociales.",
    "Cuida de los animales, los animales tambien son parte del medioambiente"
    ]
def sugerir_idea():
    return random.choice(idea_message)

@bot.command('idea')
async def idea(ctx):
    idea2 = sugerir_idea()  
    await ctx.send(f"{idea2}")


# Iniciar el bot con el token especificado en el archivo de configuraci√≥n settings.py
bot.run(settings["TOKEN"])  # Ejecutar el bot utilizando el token